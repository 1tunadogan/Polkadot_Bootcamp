/*  -----------------CARGO------------------------------
    yeni bir proje pluÅŸturmak iÃ§in "cargo new, cargo init" 
    derlemek iÃ§in  "cargo init 
    baÄŸÄ±mlÄ±lÄ±k eklemek iÃ§in "cargo add crateisimi"
    calÄ±ÅŸtÄ±rmak iÃ§in "cargo run"
    test koÅŸturma iÃ§i "cargo test"
    baÄŸÄ±mlÄ± paket lisanslarÄ± korol etmek iÃ§in "cargo deny"
    kod formatlama ve linting "cargo ftm, cargo clippy" */

use std::{vec, collections::HashMap};

fn main() {

    // tam sayÄ± deÄŸiÅŸkenleri, i8...i128, u8...u128, iÅŸlemci biti isize, usize
    let a = 1; // default i32
    let b = 1i32;
    let c: i32 = 125;

    // float deÄŸiÅŸkenler, f32, f64
    let pi = 3.14159; // default f64
    let pi: f64 = 3.14159;

    // boolean deÄŸiÅŸkenler, 8-bit
    let a: bool = true;
    let b = false;

    // char 32-bit
    let karakter: char = 't';
    let sigma = 'Ïƒ';
    let emoji = 'ğŸ˜„';

    // string deÄŸiÅŸkenleri, String, &str
    let s: &str = "Sabit bir metin"; // deÄŸiÅŸtirilemez sabit bir UTF-8 string slice
    let s: String = String::from("Dinamik bir metin");  // heap'te oluÅŸturulmuÅŸ dinamik bir String struct

    // deÄŸiÅŸken atamalarÄ±
    let z = 5;
    z = 4; // ! hata verir Ã§Ã¼nkÃ¼ z immutable
    
    let mut x = 4;
    x = 45; // artÄ±k atayabilriz "mut" ile deÄŸiÅŸtirlebilir bir yapÄ± oluÅŸturduk

    let g = 5;
    let g = 15; // eski deÄŸer yok oldu g artÄ±k 15

    // fonksiyonlar

    fn do_someting () -> i32 {
        5 // return deÄŸeri
    }

    fn karesi ( sayi: i32) -> i32 {
        sayi * sayi // return sayi * sayi ile aynÄ± ÅŸey
    }

    karesi(12); // 144

    // tuple
    let new_tuple = (500, 6.4, 1);
    let xyz = (1.0, 2.0, 3.0 );

    // ayrÄ±ÅŸtÄ±rma
    let (x, y, z) = xyz;

    // veya
    let x = xyz.0;
    let y = xyz.1;
    let z = xyz.2;

    // struct
    struct User {
        active: bool,
        usernama: String,
        email: String,
        sign_in_count: u64,
    }

    let user = User {
        active: true,
        usernama: String::from("user"),
        email: String::from("user@mail.com"),
        sign_in_count: 12,

    };

    // bu yapÄ±da format! makrosu ile yeni bir string oluÅŸturmak hedeflenmiÅŸtir
    struct User2 {name: String}

    impl User2 {
        fn greet(&self) -> String { // &self ifadesi bir referans deÄŸer tutar ve asÄ±l deÄŸer kaybolmaz
            format!("Merhaba ben {}", self.name)
        }
    }

    let user2 = User2 {
        name: String::from("Tuna"),
    };

    println!("{}", user2.greet());

    // enum
    enum Message {
        Quit,
        Move {x: i32, y: i32},
        Write(String),
        CahgeColor(i32, i32, i32),
    }

    fn print_enum(msg: &Message) {  // referans deÄŸer atamasÄ± hem sahiipiliÄŸi hem de performansÄ± korur
        match msg {
            Message::Quit => println!("I quit"),
            Message::Move { x, y }  => println!("{}, {}", x, y),
            Message::Write(str) => println!("{}", str),
            Message::CahgeColor(r, g, b) => println!("{r}, {g}, {b}"), 
        }  
    }

    let msg_quit: Message = Message::Quit;
    let msg_move: Message = Message::Move {x: 1, y: 2};
    let msg_write: Message = Message::Write(String::from("Writting"));
    let msg_color = Message::CahgeColor(255, 0, 0);

    print_enum(&msg_quit);
    print_enum(&msg_move);
    print_enum(&msg_write);
    print_enum(&msg_color);

    // array, statik yapÄ±dadÄ±rlar ve derleme zamanÄ±nda boyutlarÄ± belirlenir deÄŸiÅŸtirilemezler
    let array: [i32; 3] = [1, 2, 3];

    // array ve slices
    let array2: [i32; 6] = [10, 20, 30, 40, 50, 60];    // 6 elemanlÄ± bir dizi
    println!("array: {array:?}");   // degub formatÄ± ile Ã§Ä±ktÄ± oluÅŸturur

    let slice: &[i32] = &array2[2..4];  // belli bir aralÄ±kta seÃ§ilmiÅŸ dizinin parÃ§alarÄ±
    println!("slice: {slice:?}");

    /* slicer bellek kullanÄ±mÄ± aÃ§Ä±sÄ±ndan Ã§ok bÃ¼yÃ¼k avantaj saÄŸlar yeni bir depolama alanÄ±nÄ± iÅŸgal etmeden 
    sadece referans ile bir array2in belli bir ksÄ±mÄ±nÄ± tutar, tutuÄŸu arrayde bu sayede bir deÄŸiÅŸiklik olmaz */

    // sliceler da default olarak immutable'dÄ±r
    let array3 = [1, 2, 3];

    array3[3] = 4;  // bu atama hata verir Ã§Ã¼nkÃ¼ 3 elemanlÄ± bir array
    array3[0] = 10; // bu atamada da hata verir Ã§Ã¼nkÃ¼ array immutable'dÄ±r

    let mut array3 = [1, 2, 3];

    array3[3] = 4;  // bu kod hala hata verir Ã§Ã¼mkÃ¼ arrayler statik bir yapÄ±dadÄ±r
    array3[0] = 10; // bu iÅŸlemi artÄ±k yapabiliriz

    // vector, dinamik diziler
    let mut vector = Vec::from([1, 2, 3]);
    let mut vector = vec![1, 2, 3]; // bir macro yardÄ±mÄ± ile tanÄ±mlayabilriz
    
    let mut vector = vec![0; 3]; // 0, 0, 0

    // program Ã§alÄ±ÅŸÄ±rken ekleme ve Ã§Ä±karma yapÄ±labilir
    vector.push(4); // 0, 0, 0, 4
    vector.pop();   // 0, 0, 0

    // HashMap, dictionary
    let mut hm: HashMap<i32, &str> = HashMap::new();

    hm.insert(42, "masa");
    hm.insert(16, "sandalye");

    println!("{:?}", hm);

    // tip belirtimi yapmak zorunda deÄŸiliz aslÄ±nda, derleyici ileride kullanÄ±lan veri tipini algÄ±layabilir

    // ownership, 
    let mut hm = HashMap::new();

    hm.insert(42, "masa");
    hm.insert(16, "sandalye");

    use_hashmap(hm); // bu kullanÄ±mda scope dÄ±ÅŸÄ±na Ã§Ä±ktÄ±ÄŸÄ± ve gerÃ§ek deÄŸer kullanÄ±ldÄ±ÄŸÄ± iÃ§in alt kÄ±sÄ±mda eriÅŸemeyiz

    println!("{:?}", hm);

    // bu durumu dÃ¼zeltmek iÃ§in use_hashmap fonksiyonunu dÃ¼zeltebiriz

    // borrowing
    let mut hm2 = HashMap::new();

    hm2.insert(42, "masa");
    hm2.insert(16, "sandalye");

    use_hashmap2(&hm); // sahipliÄŸi vermedik Ã¶dÃ¼nÃ§ verdik sadece

        println!("{:?}", hm2);

    // control flow, if, if let
    let a = 1;

    if a == 1{
        println!("a == 1");
    } else {
        println!("a != 1");
    }

    let a: Option<i32> = Some(1); // option: dolu/boÅŸ olabilen bir enum

    if let Some(deger) = a {
        println!("Bir deÄŸer varmÄ±ÅŸ {}", deger)
    }else {
        println!("a'nÄ±n iÃ§inde bir deÄŸiÅŸken yok.")
    }

    // match
    let a = 1;

    match a {
        1 => println!("a == 1"),
        _ => println!("a != 1"), // default durum
    }

    let a = 5;

    match a {
        0..=4 => println!("a 0 ve 4 arasÄ±nda"),
        5..=10 => println!("a 5 ve 10 arasÄ±nda"),
        _ => (),
    }

    let a:Option<i32> = None;

    match a {
        Some(deger) => println!("deÄŸer var"),
        None => println!("deÄŸer yok"),
    }

    let a = Message::Move { x: 1, y: 2 };

match a {
    Message::Quit => {
        println!("Ã‡Ä±kÄ±ÅŸ yapÄ±yorum");
    },
    Message::Move { x, y } => {
        println!("YÃ¼rÃ¼yorum {} {}", x, y);
    },
    _ => {
        // DiÄŸer durumlarla ilgili iÅŸlemler
    }
}


    // for
    for i in 1..=41 {
        println!("maÅŸallah")
    }   // output: 41 kere maÅŸallah :)

    // while
    let mut i = 1;

    while i <=41 {
        println!("maÅŸallah");

        i += 1;
    }   // output: 41 kere maÅŸallah :)

    // loop
    let mut i = 1;

    loop {
        println!("maÅŸallah");

        i += 1;
        if i > 41 {
            break;
        }
    }

    // while let
    let mut x = vec![1, 2, 3];

    while let Some(deger) = x.pop()  {  // vektÃ¶rde bir deÄŸer var ise Ã§Ä±karmaya devam eder
        println!("deger = {deger}");
    }


}

fn use_hashmap(hm: HashMap<i32, &str>)-> HashMap<i32, &str> {
    hm
}

fn use_hashmap2(hm: &HashMap<i32, &str>) { // bir struct referansÄ± aldÄ±k

}

enum Message {
    Quit,
    Move {x: i32, y: i32},
}